Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTVjAxV2JETlhhMUpUVjBaS2RHVkdXbFppVkZaeVZtMTRTMk15VGtsalJtaG9UV3N3ZUZadGNFZFRNazE1VTJ0V1ZXSkhhRzlVVm1oRFZWWmFkR1ZHV214U2JHdzFWa2QwYzJGc1NuUmhSemxWVm0xb1JGWldXbUZqVmtaMFVteHdWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm1wT1QwMHhjRlpYYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFdha1pYWkVaT2NtSkdTbWhsYlhoWFZtMTBWMU14VWtkV1dHaFlZbFZhY2xWcVFURlNNV1J5VjI1a1YwMUVSbGRaTUZaM1ZqSktWVkpZWkZwV1JWcHlWVEJhVDJOc2NFaGpSbEpUVmxoQ1dsWXhXbE5TTWxGNVVtdGthbEp0VWxsWmJGWmhZMnhXY1ZKdFJsUlNiR3cxVkZaU1UxWnJNWEpqUld4aFUwaENTRlpxU2tabFZsWlpXa1p3YkdFelFrbFhXSEJIVkRKU1YxWnVUbGhpVjJoeldXeG9iMkl4V25STldHUlZUV3RzTlZWdGRHdGhiRXAwVld4c1dtSkhhRlJXTUZwVFZqSkdSbFJzVG1sU2JrSmFWMnhXWVZReFdsaFRiRnBZVmtWd1YxbHJXa3RUUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtRldha1pIVGtaYVNHUkhkRmRpVlhCSVZqSjRVMWR0U2toaFJsSlhUVVp3VkZacVJtdGtSa3AwWlVaa2FWWnJiekZXYlhCS1RWZEZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpPVFZad2VGVXlkREJXTVZweVkwWndXR0V4Y0ROV2FrWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnNaRlZXYkhCNlZHdGFWbVZYVWtoa1JtaFRUVWhDU2xac1pEUmpNV1IwVTJ0b2FGSnNTbGhVVlZwM1ZrWmFjVkp1WkZOTlZrcDVWR3hhVDJGWFJYZGpSV3hYWWxoQ1RGUnJXbEpsUm1SellVWlNhRTFzU25oV1YzUlhXVlpaZUZkdVJsVmhNRFZ2VlcxNGQyVkdWbGRoUnpsb1RWWndlbFl5Y0VkV01ERjFZVWhLVjFaRldreFdNVnBIWTIxS1IyRkdhRlJTVlhCS1ZtMTBVMU14VlhoWFdHaFlZbXhhVmxsclpHOWpSbHB4VkcwNVYxWnNjRWhYVkU1dllWVXhjMU51Y0ZkTmFsWlVWa2Q0YTFOR1ZuTlhiRlpYVFRGS05sWkhlR0ZXTWxKSVZXdG9hMUp0VWs5WlZFNURUbFphU0dWSFJtcE5WMUl3Vld4b2MyRkdTbGRUYlVaaFZqTlNhRll3V25kU2JGcFpZVVprVGxacmIzZFhiRlpyWXpGVmVWTnNiRnBOTW1oWVdWUkdkMkZHV2xWU2JGcHNVbTFTTVZVeWN6RldNVnB6WTBaV1dGWnNTa2hhUkVaclVqSktTVlJ0YUZObGJYaDZWMWQwWVdReVZrZFdXR3hyVWpOU2IxbHNWbmRXTVZwMFkwZEdXR0pHY0ZoWk1HUnZWMnhhV0ZWclpHRldWMUpRVlRCVk5WWXhjRWRhUms1WFYwVktNbFp0TVRCVk1VMTRWVmhzVm1FeVVsWlpiWFIzWVVaV2RHVkZkR3BTYkhCNFZUSXdOV0pIU2toVmJHeGhWbGROTVZsV1ZYaGpiVXBGVld4a1RtRnNXbFZXYTJRMFlURk9SMVp1VGxoaVJscFlXV3RvUTFkV1draGxSMFpYVFd4S1NWWlhkRzloTVVwMFlVWlNXbUpHY0V4Vk1uaHJWakZhZEZKdGNFNVdNVWwzVmxSS01HSXlSa2RUYms1VVlrZG9WbFp0ZUhkTk1WbDNWMjVLYkZKdFVubGFSV1IzWVZaYWNtTkZiRmRpUjFFd1dWUktSMWRHU2xsYVIzQlRWak5vV1ZkWGVHOVJNVkpIVlc1S1dHSkZjSE5WYlRGVFpXeHNWbGRzVG1oV2EzQXhWVmMxYjFZeFdYcGhTRXBYVmtWYWVsWnFSbGRqTVdSellVZHNhVlpyY0RaV01XUXdXVmRSZVZaclpGZGlSMUp2Vlc1d2MySXhVbGRYYm1Sc1lrWnNOVmt3Vm10V01ERkZVbXBHV2xaWGFFeFdNbmhoVjBaV2NscEhSbGRXTVVwUlZsUkNWazVXV1hoalJXaG9VakpvVDFVd1ZrdE5iRnAwVFZSQ1ZrMVZNVFJXVnpWVFZqSktTRlZzVmxwaVdGSXpXV3BHVjJOV1VuUlBWbVJUWWxob1lWZFVRbUZoTVdSSFYyNU9hbEp0ZUdGVVZWcFdUVlpzVjFaWWFHcGlWWEJHVmxkNGExUnRSbk5YYkZaWVZtMVJNRlY2Um1GamF6VlhZa1pLYVZKc2NGbFhWM1JoWkRGa1YxZHJhR3RTTUZwdlZGZHpNV1ZzV1hsT1ZrNW9UVlZzTlZsVmFFTldiVXBJWVVWU1YwMXVhSEpXYWtaaFpFVTVWMVpyTlZkaWEwWXpWbXhqZDAxV1RYaFZXR2hZWW1zMVZWbHJaRzlXYkZwMFpVaGtUazFXYkROV01qVkxZa1pLZEZWdWJHRlNWMUl6V1ZaYVlXTnRUa1ppUm1ScFVqRkZkMWRXVWt0U01WbDRZMFZhWVZKck5XOVphMmhEVjFaa1dHVkdUbE5oZWtaSVZqSjRWMVV5UlhwUmJrNVdZbFJHVkZZeWVHdGpiRnBWVW14a1RsWnVRalpYVkVKaFZqRmtSMWRZY0ZaaWEzQllWbXRXWVdWc1duRlNiR1JxVFZkU2VsbFZaRzlVYXpGV1kwUktWMkpIVGpSVWEyUk9aREF4U1dGR2FGaFNNMmhRVm0xNGExVXhXWGhWYkdoclUwZFNWRlJXV2t0bGJHeFdZVWQwV0ZJd2NFaFpNRnB2VjJzeFIxTnNRbGROYm1ob1ZqQmFWMk5zY0VoU2JHUlhUVlZ3VWxac1VrTmhNVWw0VTFoc1UyRXlhSEJWYlhNeFkwWlZkMVpyZEU1aVJuQjRWVEp3UTFack1WWmlSRkpYVW0xb2VsWnNXbXRUUjFaSFYyeHdWMUpXYjNwWFYzQkhWakpPVjFWdVNsVmlSMUpVV1d4b2IwNVdXblJOUkVab1RWWnNORll5TlU5aGJFcEdVMjFvVjJKSFVrOVVWbHBoVjBkTmVtRkdhRk5pUm05NFYxUkNZV0V4VW5OWFdHeG9Va1Z3V0ZsWGRIZE9iSEJGVTJ4a1YwMVdjREZWTW5oRFZqSktWMU51WkZkaGEwcG9WWHBHYTFZeFpISmhSM2hUVFVad2FGWnRjRWRUTVVsNFZXNU9XR0pWV2xkVmJYaHpUbFpzVmxkc1RsZE5hMVkwVmpKME1GWldXbk5qU0VwYVpXdGFhRnBGVlRWV01WcHlUbFprYVdFd2EzaFdiWFJoV1ZaWmVWTllhRmhpYkVwVldWUktVMVpXYkhKYVJ6bGFWbXh3ZVZadE1VZFVhekZYWTBoc1YwMXFSa2haVjNoaFkyczFXV0pHYUdoTldFSlJWMVphWVZNeVRuUlVhMVpZWWtkU2IxUlhjekJOUm1SWlkwVmtWMkpXV2xoV1J6VlhWa2RLUjFOdVFsZGlSbkF6VmpGYWExWXhWbkphUjNST1lURndTVmRYZEc5U01WVjVVMnRhYWxORk5WZFpiRkpIVmtaU1YxZHNXbXhXTURReVZXMTRhMVJzV25WUmFscFlWa1ZLYUZacVJtdFNNV1IxVkd4U2FFMXRhRzlXVjNSWFdWZE9jMVp1UmxOaVdGSnlWbTEwZDJWc1duUk5WemxWWWtWd1NGWXljRXRXTWtwSVZHcFNWV0V5VWxOYVZscGhZMnh3UjFwSGJHbFNXRUpSVm0weE5HRXhWWGhhUldSV1lrWndWMWxVU2xOak1WcDBaVVYwYkdKR2NEQlVWVkpYVmpBeFJWSnNaRnBpYmtKTVZtMHhTMWRXVm5WWGJHUm9ZVEZ3YjFaWE1UUmhNazUwVm10a1lWSXlhRzlVVkVKTFZXeGFjMWt6YUU5U2JYaFpWa1pvYjJGc1NsaGhTRUpXWWxoTmVGWkVSbUZqTVdSelkwZDRhVkp1UVhkWGJGWnJVakZhY2sxV1dtbFNSa3BoV1ZSR2QyTnNXWGRhUlhScVlsVTFSMVF4V210aFZtUklXak53VjJGclNtaFpla1pyVjBaU2NscEhSbE5pVmtwVlYxZDBZV1F3TlZkWGJsSk9Wa1ZLWVZadGVFZE9SbHAwWlVaa1ZXSkZjRWxaTTNCeVVGRTlQUT09